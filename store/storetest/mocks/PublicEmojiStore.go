// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost-server/v5/model"
	mock "github.com/stretchr/testify/mock"
)

// PublicEmojiStore is an autogenerated mock type for the PublicEmojiStore type
type PublicEmojiStore struct {
	mock.Mock
}

// CheckIsPublicEmojis provides a mock function with given fields: emojiId
func (_m *PublicEmojiStore) CheckIsPublicEmojis(emojiId string) error {
	ret := _m.Called(emojiId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(emojiId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccessByEmojiId provides a mock function with given fields: emojiId
func (_m *PublicEmojiStore) DeleteAccessByEmojiId(emojiId string) error {
	ret := _m.Called(emojiId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(emojiId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllPublicEmojis provides a mock function with given fields:
func (_m *PublicEmojiStore) GetAllPublicEmojis() ([]*model.PublicEmoji, error) {
	ret := _m.Called()

	var r0 []*model.PublicEmoji
	if rf, ok := ret.Get(0).(func() []*model.PublicEmoji); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.PublicEmoji)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: public_emoji
func (_m *PublicEmojiStore) Save(public_emoji *model.PublicEmoji) (*model.PublicEmoji, error) {
	ret := _m.Called(public_emoji)

	var r0 *model.PublicEmoji
	if rf, ok := ret.Get(0).(func(*model.PublicEmoji) *model.PublicEmoji); ok {
		r0 = rf(public_emoji)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.PublicEmoji)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.PublicEmoji) error); ok {
		r1 = rf(public_emoji)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
