// Code generated by mockery v1.0.0. DO NOT EDIT.

// Regenerate this file using `make store-mocks`.

package mocks

import (
	model "github.com/mattermost/mattermost-server/v5/model"
	mock "github.com/stretchr/testify/mock"
)

// EmojiAccessStore is an autogenerated mock type for the EmojiAccessStore type
type EmojiAccessStore struct {
	mock.Mock
}

// DeleteAccessByEmojiId provides a mock function with given fields: emojiId
func (_m *EmojiAccessStore) DeleteAccessByEmojiId(emojiId string) error {
	ret := _m.Called(emojiId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(emojiId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteAccessByUserIdAndEmojiId provides a mock function with given fields: userId, emojiId
func (_m *EmojiAccessStore) DeleteAccessByUserIdAndEmojiId(userId string, emojiId string) error {
	ret := _m.Called(userId, emojiId)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string) error); ok {
		r0 = rf(userId, emojiId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetByUserIdAndEmojiId provides a mock function with given fields: userId, emojiId
func (_m *EmojiAccessStore) GetByUserIdAndEmojiId(userId string, emojiId string) (*model.EmojiAccess, error) {
	ret := _m.Called(userId, emojiId)

	var r0 *model.EmojiAccess
	if rf, ok := ret.Get(0).(func(string, string) *model.EmojiAccess); ok {
		r0 = rf(userId, emojiId)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EmojiAccess)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string) error); ok {
		r1 = rf(userId, emojiId)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetMultipleByUserId provides a mock function with given fields: ids
func (_m *EmojiAccessStore) GetMultipleByUserId(ids []string) ([]*model.EmojiAccess, error) {
	ret := _m.Called(ids)

	var r0 []*model.EmojiAccess
	if rf, ok := ret.Get(0).(func([]string) []*model.EmojiAccess); ok {
		r0 = rf(ids)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.EmojiAccess)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func([]string) error); ok {
		r1 = rf(ids)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: emoji_access
func (_m *EmojiAccessStore) Save(emoji_access *model.EmojiAccess) (*model.EmojiAccess, error) {
	ret := _m.Called(emoji_access)

	var r0 *model.EmojiAccess
	if rf, ok := ret.Get(0).(func(*model.EmojiAccess) *model.EmojiAccess); ok {
		r0 = rf(emoji_access)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.EmojiAccess)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(*model.EmojiAccess) error); ok {
		r1 = rf(emoji_access)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
