name: Casual Chat Server CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CC_BUILD_PREFIX: 'cc-'

jobs:
  check-env:
    name: Check Environment
    runs-on: cc-runner
    steps:
      - name: Add Go Path # Do this before all go commands
        run: | 
          echo ::set-env name=GOPATH::$HOME/go
          echo ::add-path::$HOME/go/bin
          echo ::add-path::/usr/local/go/bin
      - name: Verify Go Installment
        run: go version
      - name: Verify Make Installment
        run: make -version
      - name: Verify golangci-lint Installment
        run: golangci-lint version
      - name: Verify mattermost-govet Installment
        run: mattermost-govet help
      - name: Verify node Installment
        run: node -v
      - name: Verify npm Installment
        run: npm -v

  check-app-layers:
    name: Check App Layers
    runs-on: cc-runner
    needs: [ check-env ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: ./mattermost-server
      - name: Add Go Path # Do this before all go commands
        run: | 
          echo ::set-env name=GOPATH::$HOME/go
          echo ::add-path::$HOME/go/bin
          echo ::add-path::/usr/local/go/bin
      - name: Check App Layers
        run: |
          make app-layers
          if [[ -n $(git status --porcelain) ]]; then echo "Please update the app layers using make app-layers"; exit 1; fi
        working-directory: ./mattermost-server

  check-store-layers:
    name: Check Store Layers
    runs-on: cc-runner
    needs: [ check-env ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: ./mattermost-server
      - name: Add Go Path # Do this before all go commands
        run: | 
          echo ::set-env name=GOPATH::$HOME/go
          echo ::add-path::$HOME/go/bin
          echo ::add-path::/usr/local/go/bin
      - name: Check Store Layers
        run: |
          make store-layers
          if [[ -n $(git status --porcelain) ]]; then echo "Please update the store layers using make store-layers"; exit 1; fi
        working-directory: ./mattermost-server
  
  check-server-style:
    name: Check Server Style
    runs-on: cc-runner
    needs: [ check-env ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: ./mattermost-server
      - name: Add Go Path # Do this before all go commands
        run: | 
          echo ::set-env name=GOPATH::$HOME/go
          echo ::add-path::$HOME/go/bin
          echo ::add-path::/usr/local/go/bin
      - name: Check Style
        run: |
          make config-reset
          make check-style BUILD_NUMBER='${{env.CC_BUILD_PREFIX}}${{env.GITHUB_RUN_NUMBER}}' MM_NO_ENTERPRISE_LINT=true
        working-directory: ./mattermost-server

  test-server:
    name: Test Server
    runs-on: cc-runner
    needs: [ check-server-style , check-app-layers , check-store-layers ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: ./mattermost-server
      - name: Add Go Path # Do this before all go commands
        run: | 
          echo ::set-env name=GOPATH::$HOME/go
          echo ::add-path::$HOME/go/bin
          echo ::add-path::/usr/local/go/bin
      - name: Test Server
        run: |
          make test-server
        working-directory: ./mattermost-server
      - name: Generate Junit Report
        run: xunit-viewer -r report.xml -o report.html
        working-directory: ./mattermost-server
      - name: Upload Test Report
        uses: actions/upload-artifact@v2
        with:
          name: server-test-results
          path: |
            report.xml
            report.html
      
  check-webapp-type:
    name: Check Type
    runs-on: cc-runner
    needs: [ check-env ]
    steps:
      - name: Setup Webapp Repository Name
      - run: | 
          echo ::set-env name=CC_WEBAPP_REPOSITORY::${${{ env.GITHUB_REPOSITORY }}%%/mattermost-server}/mattermost-webapp
          echo $CC_WEBAPP_REPOSITORY
      - name: Checkout Webapp Repository
        uses: actions/checkout@v2
        with:
          repository: ${{ env.CC_WEBAPP_REPOSITORY }}
          path: ./mattermost-webapp
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependency
        run: npm ci
        working-directory: ./mattermost-webapp
      - name: Check Type
        run: npm run check-types
        working-directory: ./mattermost-webapp

  # test:
  #   name: Unit Test
  #   runs-on: cc-runner
  #   needs: [ check-style , check-type , check-i18n]
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2
  #     - name: Cache node modules
  #       uses: actions/cache@v2
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-
  #     - name: Install Dependency
  #       run: npm ci
  #     - name: Test
  #       run: npm run test-ci 
  #     - name: Generate HTML Report
  #       run: xunit-viewer -r build/test-results.xml -o build/test-results.html
  #     - name: Upload Test Report
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: webapp-test-results
  #         path: |
  #           build/test-results.xml
  #           build/test-results.html

  # build:
  #   name: Build
  #   runs-on: cc-runner
  #   needs: [ test ]
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2
  #     - name: Cache node modules
  #       uses: actions/cache@v2
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-
  #     - name: Install Dependency
  #       run: |
  #         npm ci
  #         cd node_modules/mattermost-redux && npm i && npm run build
  #     - name: Build
  #       run: npm run build 
  #     - name: Upload Webapp
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: casualchat-mattermost-webapp
  #         path: dist/
#  build:
#    name: Build
#    runs-on: ubuntu-latest
#    steps:

#    - name: Set up Go 1.x
#      uses: actions/setup-go@v2
#      with:
#        go-version: ^1.13
#      id: go

#    - name: Check out code into the Go module directory
#      uses: actions/checkout@v2

#    - name: Get dependencies
#      run: |
#        go get -v -t -d ./...
#        if [ -f Gopkg.toml ]; then
#            curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
#            dep ensure
#        fi

#    - name: Build
#      run: go build -v .

#    - name: Test
#      run: go test -v .
