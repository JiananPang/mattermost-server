name: Casual Chat Server CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CC_BUILD_PREFIX: 'cc-'
  COMPOSE_PROJECT_NAME: "ghactions"

jobs:
  check-env:
    name: Check Environment
    runs-on: self-hosted
    steps:
      - name: Add Go Path # Do this before all go commands
        run: | 
          echo ::set-env name=GOPATH::$HOME/go
          echo ::add-path::$HOME/go/bin
          echo ::add-path::/usr/local/go/bin
      - name: Verify go Installment
        run: go version
      - name: Verify make Installment
        run: make -version
      - name: Verify golangci-lint Installment
        run: golangci-lint version
      - name: Verify node Installment
        run: node -v
      - name: Verify npm Installment
        run: npm -v
      - name: Verify xunit-viewer Installment
        run: xunit-viewer --version
      - name: Verify docker Installment
        run: docker version
      - name: Verify docker-compose Installment
        run: docker-compose version

  # check-app-layers:
  #   name: Check App Layers
  #   runs-on: cc-runner
  #   needs: [ check-env ]
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2
  #       with:
  #         path: ./mattermost-server
  #     - name: Add Go Path # Do this before all go commands
  #       run: | 
  #         echo ::set-env name=GOPATH::$HOME/go
  #         echo ::add-path::$HOME/go/bin
  #         echo ::add-path::/usr/local/go/bin
  #     - name: Check App Layers
  #       run: |
  #         make app-layers
  #         if [[ -n $(git status --porcelain) ]]; then echo "Please update the app layers using make app-layers"; exit 1; fi
  #       working-directory: ./mattermost-server

  # check-store-layers:
  #   name: Check Store Layers
  #   runs-on: cc-runner
  #   needs: [ check-env ]
  #   steps:
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2
  #       with:
  #         path: ./mattermost-server
  #     - name: Add Go Path # Do this before all go commands
  #       run: | 
  #         echo ::set-env name=GOPATH::$HOME/go
  #         echo ::add-path::$HOME/go/bin
  #         echo ::add-path::/usr/local/go/bin
  #     - name: Check Store Layers
  #       run: |
  #         make store-layers
  #         if [[ -n $(git status --porcelain) ]]; then echo "Please update the store layers using make store-layers"; exit 1; fi
  #       working-directory: ./mattermost-server
  
  # check-server-style:
  #   name: Check Server Style
  #   runs-on: cc-runner
  #   needs: [ check-env ]
  #   steps:
  #     - name: Export Build Number
  #       run: echo ::set-env name=BUILD_NUMBER::$CC_BUILD_PREFIX$GITHUB_RUN_NUMBER
  #     - name: Checkout Repository
  #       uses: actions/checkout@v2
  #       with:
  #         path: ./mattermost-server
  #     - name: Add Go Path # Do this before all go commands
  #       run: | 
  #         echo ::set-env name=GOPATH::$HOME/go
  #         echo ::add-path::$HOME/go/bin
  #         echo ::add-path::/usr/local/go/bin
  #     - name: Install mattermost-govet
  #       run: GO111MODULE=off GOBIN=$(pwd)/bin go get -u github.com/mattermost/mattermost-govet
  #       working-directory: ./mattermost-server
  #     - name: Check Style
  #       run: |
  #         make config-reset
  #         make check-style MM_NO_ENTERPRISE_LINT=true
  #       working-directory: ./mattermost-server

  test-server: # Run go tests 
    name: Test Server
    runs-on: self-hosted
    needs: [test-schema] #[ check-server-style , check-app-layers , check-store-layers ]
    strategy: # Server tests need to run in 2 environments
      fail-fast: false # Always run both tests even when 1 fails
      matrix:
        dbparams:
          - {
            DRIVER_NAME: mysql,
            DATA_SOURCE: "mmuser:mostest@tcp(mysql:3306)/mattermost_test?charset=utf8mb4,utf8"
          }
          - {
            DRIVER_NAME: postgres,
            DATA_SOURCE: "postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10"
          }
    steps:
      - name: Export Environment Variables
        run: |
          echo ::set-env name=BUILD_NUMBER::$CC_BUILD_PREFIX$GITHUB_RUN_NUMBER
          echo ::set-env name=WORKING_ROOT_DIRECTORY::$(pwd)

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: ./mattermost-server

      - name: Setup Enterprise Environment
        run: |
          rm -rf enterprise
          mkdir -p enterprise/imports
          cp -T mattermost-server/imports/placeholder.go enterprise/imports/imports.go
      
      - name: Add Go Path 
        run: | 
          echo ::set-env name=GOPATH::$HOME/go
          echo ::add-path::$HOME/go/bin
          echo ::add-path::/usr/local/go/bin

      - name: Run docker-compose
        run: |
          cd mattermost-server/build
          docker-compose --no-ansi run --rm start_dependencies
          cat ../tests/test-data.ldif | docker-compose --no-ansi exec -T openldap bash -c 'ldapadd -x -D "cn=admin,dc=mm,dc=test,dc=com" -w mostest';
          docker-compose --no-ansi exec -T minio sh -c 'mkdir -p /data/mattermost-test';
          docker-compose --no-ansi ps

      - name: Wait for docker-compose
        run: |
          sleep 5
          docker run --net ${{ env.COMPOSE_PROJECT_NAME }}_mm-test appropriate/curl:latest sh -c "until curl --max-time 5 --output - http://mysql:3306; do echo waiting for mysql; sleep 5; done;"
          docker run --net ${{ env.COMPOSE_PROJECT_NAME }}_mm-test appropriate/curl:latest sh -c "until curl --max-time 5 --output - http://elasticsearch:9200; do echo waiting for elasticsearch; sleep 5; done;"

      - name: Test Server - (${{ matrix.dbparams.DRIVER_NAME }})
        run: |
          ulimit -n 8096
          mkdir -p client/plugins
          docker run -i --net ${{ env.COMPOSE_PROJECT_NAME }}_mm-test \
            --env TEST_DATABASE_MYSQL_DSN="mmuser:mostest@tcp(mysql:3306)/mattermost_test?charset=utf8mb4,utf8\u0026readTimeout=30s\u0026writeTimeout=30s" \
            --env TEST_DATABASE_POSTGRESQL_DSN="postgres://mmuser:mostest@postgres:5432/mattermost_test?sslmode=disable&connect_timeout=10" \
            --env TEST_DATABASE_MYSQL_ROOT_PASSWD=mostest \
            --env CI_INBUCKET_HOST=inbucket \
            --env CI_MINIO_HOST=minio \
            --env CI_INBUCKET_PORT=10080 \
            --env CI_MINIO_PORT=9000 \
            --env CI_INBUCKET_SMTP_PORT=10025 \
            --env CI_LDAP_HOST=openldap \
            --env IS_CI="true" \
            --env MM_EMAILSETTINGS_SMTPSERVER=inbucket \
            --env MM_EMAILSETTINGS_SMTPPORT=10025 \
            --env MM_ELASTICSEARCHSETTINGS_CONNECTIONURL=http://elasticsearch:9200 \
            --env MM_SQLSETTINGS_DATASOURCE="${{ matrix.dbparams.DATA_SOURCE }}" \
            --env MM_SQLSETTINGS_DRIVERNAME=${{ matrix.dbparams.DRIVER_NAME }} \
            --env GOBIN=/mattermost/mattermost-server/bin \
            -v ${{ env.WORKING_ROOT_DIRECTORY }}:/mattermost \
            -w /mattermost/mattermost-server \
            mattermost/mattermost-build-server:20200731_golang-1.14.6 \
            bash -c 'ulimit -n 8096; make test-server BUILD_NUMBER="${{ env.BUILD_NUMBER }}" TESTFLAGS= TESTFLAGSEE='
        working-directory: ./mattermost-server
        timeout-minutes: 60

      - name: Capture docker logs
        if: always()
        run: |
            mkdir -p logs
            docker-compose logs --tail="all" -t --no-color > logs/docker-compose_logs
            docker ps -a --no-trunc > logs/docker_ps
            docker stats -a --no-stream > logs/docker_stats
            tar -czvf logs/docker_logs.tar.gz logs/docker-compose_logs logs/docker_ps logs/docker_stats
        working-directory: ./mattermost-server/build  

      - name: Check Xml Test Report
        id: find_test_report
        run: test -f report.xml
        if: always()
        working-directory: ./mattermost-server

      - name: Generate Html Report
        run: |
          xunit-viewer -r report.xml -o report.html
        if: always() && steps.find_test_report.outcome == 'success'
        working-directory: ./mattermost-server

      - name: Upload Logs and Test Reports - (${{ matrix.dbparams.DRIVER_NAME }})
        if: always() && steps.find_test_report.outcome == 'success'
        uses: actions/upload-artifact@v2
        with:
          name: server-test-artifacts-${{ matrix.dbparams.DRIVER_NAME }}-${{ env.GITHUB_RUN_NUMBER }}
          path: |
            mattermost-server/build/logs/docker-compose_logs
            mattermost-server/build/logs/docker_ps
            mattermost-server/build/logs/docker_stats
            mattermost-server/report.xml
            mattermost-server/report.html

      - name: Upload Logs Only - (${{ matrix.dbparams.DRIVER_NAME }})
        if: always() && steps.find_test_report.outcome != 'success'
        uses: actions/upload-artifact@v2
        with:
          name: server-test-artifacts-${{ matrix.dbparams.DRIVER_NAME }}-${{ env.GITHUB_RUN_NUMBER }}
          path: |
            mattermost-server/build/logs/docker-compose_logs
            mattermost-server/build/logs/docker_ps
            mattermost-server/build/logs/docker_stats

      - name: Stop Docker
        run: |
          docker-compose down -v
          docker-compose rm -v
        if: always()
        working-directory: ./mattermost-server

  test-schema:
    name: Test Schema Migration
    runs-on: self-hosted
    needs: [ check-env ] #[ check-server-style , check-app-layers , check-store-layers ]
    strategy: # Server tests need to run in 2 environments
      fail-fast: false # Always run both tests even when 1 fails
      matrix:
        dbparams:
          - {
            DRIVER_NAME: mysql,
            MIGRATED_DATA_SOURCE: "mmuser:mostest@tcp(mysql:3306)/migrated?charset=utf8mb4,utf8&readTimeout=30s&writeTimeout=30s",
            LATEST_DATA_SOURCE: "mmuser:mostest@tcp(mysql:3306)/latest?charset=utf8mb4,utf8&readTimeout=30s&writeTimeout=30s",
            CREATE_CMD: mysql mysql -uroot -pmostest -e "CREATE DATABASE migrated; CREATE DATABASE latest; GRANT ALL PRIVILEGES ON migrated.* TO mmuser; GRANT ALL PRIVILEGES ON latest.* TO mmuser",
            DB_IMPORT_CMD: mysql mysql -D migrated -uroot -pmostest,
            POST_RUN: echo "Ignoring known MySQL mismatch ChannelMembers.SchemeGuest" && docker-compose --no-ansi exec -T mysql mysql -D migrated -uroot -pmostest -e "ALTER TABLE ChannelMembers DROP COLUMN SchemeGuest;" && docker-compose --no-ansi exec -T mysql mysql -D latest -uroot -pmostest -e "ALTER TABLE ChannelMembers DROP COLUMN SchemeGuest;",
            MIGRATED_DUMP_CMD: mysql mysqldump --skip-opt --no-data --compact -u root -pmostest migrated > migrated.sql,
            LATEST_DUMP_CMD: mysql mysqldump --skip-opt --no-data --compact -u root -pmostest latest > latest.sql,
            REMOVE_CMD: mysql mysql -uroot -pmostest -e 'DROP DATABASE migrated; DROP DATABASE latest',
          }
          - {
            DRIVER_NAME: postgres,
            MIGRATED_DATA_SOURCE: "postgres://mmuser:mostest@postgres:5432/migrated?sslmode=disable&connect_timeout=10",
            LATEST_DATE_SOURCE: "postgres://mmuser:mostest@postgres:5432/latest?sslmode=disable&connect_timeout=10",
            CREATE_CMD: postgres sh -c 'exec echo "CREATE DATABASE migrated; CREATE DATABASE latest;" | exec psql -U mmuser mattermost_test',
            DB_IMPORT_CMD: postgres psql -U mmuser -d migrated,
            POST_RUN: echo "There is no known Postgres mismatch",
            MIGRATED_DUMP_CMD: postgres pg_dump --schema-only -d migrated -U mmuser > migrated.sql,
            LATEST_DUMP_CMD: postgres pg_dump --schema-only -d latest -U mmuser > latest.sql,
            REMOVE_CMD: postgres sh -c 'exec echo "DROP DATABASE migrated; DROP DATABASE latest;" | exec psql -U mmuser mattermost_test'
          }
    steps:
      - name: Export Environment Variables
        run: |
          echo ::set-env name=BUILD_NUMBER::$CC_BUILD_PREFIX$GITHUB_RUN_NUMBER
          echo ::set-env name=WORKING_ROOT_DIRECTORY::$(pwd)

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: ./mattermost-server

      - name: Setup Enterprise Environment
        run: |
          rm -rf enterprise
          mkdir -p enterprise/imports
          cp -T mattermost-server/imports/placeholder.go enterprise/imports/imports.go
      
      - name: Add Go Path 
        run: | 
          echo ::set-env name=GOPATH::$HOME/go
          echo ::add-path::$HOME/go/bin
          echo ::add-path::/usr/local/go/bin

      - name: Run docker-compose
        run: |
          cd mattermost-server/build
          docker-compose --no-ansi run --rm start_dependencies
          cat ../tests/test-data.ldif | docker-compose --no-ansi exec -T openldap bash -c 'ldapadd -x -D "cn=admin,dc=mm,dc=test,dc=com" -w mostest';
          docker-compose --no-ansi exec -T minio sh -c 'mkdir -p /data/mattermost-test';
          docker-compose --no-ansi ps

      - name: Wait for docker-compose
        run: |
          sleep 5
          docker run --net ${{ env.COMPOSE_PROJECT_NAME }}_mm-test appropriate/curl:latest sh -c "until curl --max-time 5 --output - http://mysql:3306; do echo waiting for mysql; sleep 5; done;"
          docker run --net ${{ env.COMPOSE_PROJECT_NAME }}_mm-test appropriate/curl:latest sh -c "until curl --max-time 5 --output - http://elasticsearch:9200; do echo waiting for elasticsearch; sleep 5; done;"

      - name: Test Schema - (${{ matrix.dbparams.DRIVER_NAME }})
        run: |
          ulimit -n 8096
          mkdir -p client/plugins
          cd build
          echo "Creating databases"
          docker-compose --no-ansi exec -T ${{ matrix.dbparams.CREATE_CMD }}
          echo "Importing ${{ matrix.dbparams.DRIVER_NAME }} dump from version 5.0"
          docker-compose --no-ansi exec -T ${{ matrix.dbparams.DB_IMPORT_CMD }} < ../scripts/mattermost-${{ matrix.dbparams.DRIVER_NAME }}-5.0.sql
          docker run -i --net ${{ env.COMPOSE_PROJECT_NAME }}_mm-test \
            --env CI_INBUCKET_HOST=inbucket \
            --env CI_MINIO_HOST=minio \
            --env CI_INBUCKET_PORT=10080 \
            --env CI_MINIO_PORT=9000 \
            --env CI_INBUCKET_SMTP_PORT=10025 \
            --env CI_LDAP_HOST=openldap \
            --env IS_CI="true" \
            --env MM_EMAILSETTINGS_SMTPSERVER=inbucket \
            --env MM_EMAILSETTINGS_SMTPPORT=10025 \
            --env MM_ELASTICSEARCHSETTINGS_CONNECTIONURL=http://elasticsearch:9200 \
            --env MM_SQLSETTINGS_DATASOURCE="${{ matrix.dbparams.MIGRATED_DATA_SOURCE }}" \
            --env MM_SQLSETTINGS_DRIVERNAME=${{ matrix.dbparams.DRIVER_NAME }} \
            --env GOBIN=/mattermost/mattermost-server/bin \
            -v ${{ env.WORKING_ROOT_DIRECTORY }}:/mattermost \
            -w /mattermost/mattermost-server \
            mattermost/mattermost-build-server:20200731_golang-1.14.6 \
            bash -c 'ulimit -n 8096; make ARGS="version" run-cli && make MM_SQLSETTINGS_DATASOURCE="${{ matrix.dbparams.LATEST_DATA_SOURCE }}" ARGS="version" run-cli'
          ${{ matrix.dbparams.POST_RUN }}
          echo "Generating dump"
          docker-compose --no-ansi exec -T ${{ matrix.dbparams.MIGRATED_DUMP_CMD }}
          docker-compose --no-ansi exec -T ${{ matrix.dbparams.LATEST_DUMP_CMD }}
          echo "Removing databases created for db comparison"
          docker-compose --no-ansi exec -T ${{ matrix.dbparams.REMOVE_CMD }}
          echo "Generating diff"
          diff migrated.sql latest.sql > diff.txt && echo "Both schemas are same" || (echo "Schema mismatch" && cat diff.txt && exit 1)
        working-directory: ./mattermost-server
        timeout-minutes: 60
      
      - name: Stop Docker
        run: |
          docker-compose down -v
          docker-compose rm -v
        if: always()
        working-directory: ./mattermost-server

  # check-webapp-type:
  #   name: Check Webapp Type
  #   runs-on: cc-runner
  #   needs: [ check-env ]
  #   steps:
  #     - name: Export Webapp Repository Name
  #       run: | 
  #         echo "Server Repository: $GITHUB_REPOSITORY"
  #         echo ::set-env name=CC_WEBAPP_REPOSITORY::${GITHUB_REPOSITORY%%/mattermost-server}/mattermost-webapp
  #     - name: Checkout Webapp Repository
  #       uses: actions/checkout@v2
  #       with:
  #         repository: ${{ env.CC_WEBAPP_REPOSITORY }}
  #         path: ./mattermost-webapp
  #     - name: Cache node modules
  #       uses: actions/cache@v2
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-
  #     - name: Install Dependency
  #       run: npm ci
  #       working-directory: ./mattermost-webapp
  #     - name: Check Type
  #       run: npm run check-types
  #       working-directory: ./mattermost-webapp

  # test-webapp:
  #   name: Test Webapp
  #   runs-on: cc-runner
  #   needs: [ check-webapp-type ]
  #   steps:
  #     - name: Export Webapp Repository Name
  #       run: | 
  #         echo "Server Repository: $GITHUB_REPOSITORY"
  #         echo ::set-env name=CC_WEBAPP_REPOSITORY::${GITHUB_REPOSITORY%%/mattermost-server}/mattermost-webapp
  #     - name: Checkout Webapp Repository
  #       uses: actions/checkout@v2
  #       with:
  #         repository: ${{ env.CC_WEBAPP_REPOSITORY }}
  #         path: ./mattermost-webapp
  #     - name: Cache node modules
  #       uses: actions/cache@v2
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-
  #     - name: Install Dependency
  #       run: npm ci
  #       working-directory: ./mattermost-webapp
  #     - name: Test
  #       run: npm run test-ci 
  #       working-directory: ./mattermost-webapp
  #     - name: Generate HTML Report
  #       run: xunit-viewer -r build/test-results.xml -o build/test-results.html
  #       working-directory: ./mattermost-webapp
  #     - name: Upload Test Report
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: webapp-test-results
  #         path: |
  #           mattermost-webapp/build/test-results.xml
  #           mattermost-webapp/build/test-results.html
  finish-test-server:
    name: Test Finish
    runs-on: self-hosted
    needs: [test-server]
    steps:
      - name: Test
        run: echo "Done"
  # build:
  #   name: Build and Package
  #   runs-on: cc-runner
  #   needs: [ test-server , test-webapp ]
  #   steps:
  #     - name: Export Webapp Repository Name
  #       run: | 
  #         echo "Server Repository: $GITHUB_REPOSITORY"
  #         echo ::set-env name=CC_WEBAPP_REPOSITORY::${GITHUB_REPOSITORY%%/mattermost-server}/mattermost-webapp
  #     - name: Export Build Number
  #       run: echo ::set-env name=BUILD_NUMBER::$CC_BUILD_PREFIX$GITHUB_RUN_NUMBER
  #     - name: Checkout Webapp Repository
  #       uses: actions/checkout@v2
  #       with:
  #         repository: ${{ env.CC_WEBAPP_REPOSITORY }}
  #         path: ./mattermost-webapp
  #     - name: Checkout Server Repository
  #       uses: actions/checkout@v2
  #       with:
  #         path: ./mattermost-server
  #     - name: Add Go Path # Do this before all go commands
  #       run: | 
  #         echo ::set-env name=GOPATH::$HOME/go
  #         echo ::add-path::$HOME/go/bin
  #         echo ::add-path::/usr/local/go/bin
  #     - name: Cache node modules
  #       uses: actions/cache@v2
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-
  #     - name: Install Dependency
  #       run: |
  #         npm ci
  #         cd node_modules/mattermost-redux && npm i && npm run build
  #       working-directory: ./mattermost-webapp
  #     - name: Build Webapp
  #       run: npm run build 
  #       working-directory: ./mattermost-webapp
  #     - name: Setting up Enterprise Environment
  #       run: |
  #         rm -rf enterprise
  #         mkdir -p enterprise/imports
  #         cp -T mattermost-server/imports/placeholder.go enterprise/imports/imports.go
  #     - name: Build Server
  #       run: make build-cmd
  #       working-directory: ./mattermost-server
  #     - name: Package
  #       run: make package
  #       working-directory: ./mattermost-server
  #     - name: Upload Windows Package
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: cchat-server-windows
  #         path: |
  #           mattermost-server/dist
  #     - name: Upload Linux Package
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: cchat-server-linux
  #         path: |
  #           mattermost-server/dist
  #     - name: Upload OSX Package
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: cchat-server-osx
  #         path: |
  #           mattermost-server/dist
