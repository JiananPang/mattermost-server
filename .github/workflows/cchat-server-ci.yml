name: Casual Chat Server CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  CC_BUILD_PREFIX: 'cc-'

jobs:
  check-env:
    name: Check Environment
    runs-on: cc-runner
    steps:
      - name: Add Go Path # Do this before all go commands
        run: | 
          echo ::set-env name=GOPATH::$HOME/go
          echo ::add-path::$HOME/go/bin
          echo ::add-path::/usr/local/go/bin
      - name: Verify Go Installment
        run: go version
      - name: Verify Make Installment
        run: make -version
      - name: Verify golangci-lint Installment
        run: golangci-lint version
      - name: Verify node Installment
        run: node -v
      - name: Verify npm Installment
        run: npm -v
      - name: Verify xunit-viewer Installment
        run: xunit-viewer --version
      - name: Verify docker-compose Installment
        run: docker-compose version

  check-app-layers:
    name: Check App Layers
    runs-on: cc-runner
    needs: [ check-env ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: ./mattermost-server
      - name: Add Go Path # Do this before all go commands
        run: | 
          echo ::set-env name=GOPATH::$HOME/go
          echo ::add-path::$HOME/go/bin
          echo ::add-path::/usr/local/go/bin
      - name: Check App Layers
        run: |
          make app-layers
          if [[ -n $(git status --porcelain) ]]; then echo "Please update the app layers using make app-layers"; exit 1; fi
        working-directory: ./mattermost-server

  check-store-layers:
    name: Check Store Layers
    runs-on: cc-runner
    needs: [ check-env ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: ./mattermost-server
      - name: Add Go Path # Do this before all go commands
        run: | 
          echo ::set-env name=GOPATH::$HOME/go
          echo ::add-path::$HOME/go/bin
          echo ::add-path::/usr/local/go/bin
      - name: Check Store Layers
        run: |
          make store-layers
          if [[ -n $(git status --porcelain) ]]; then echo "Please update the store layers using make store-layers"; exit 1; fi
        working-directory: ./mattermost-server
  
  check-server-style:
    name: Check Server Style
    runs-on: cc-runner
    needs: [ check-env ]
    steps:
      - name: Export Build Number
        run: echo ::set-env name=BUILD_NUMBER::$CC_BUILD_PREFIX$GITHUB_RUN_NUMBER
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: ./mattermost-server
      - name: Add Go Path # Do this before all go commands
        run: | 
          echo ::set-env name=GOPATH::$HOME/go
          echo ::add-path::$HOME/go/bin
          echo ::add-path::/usr/local/go/bin
      - name: Install mattermost-govet
        run: GO111MODULE=off GOBIN=$(pwd)/bin go get -u github.com/mattermost/mattermost-govet
        working-directory: ./mattermost-server
      - name: Check Style
        run: |
          make config-reset
          make check-style MM_NO_ENTERPRISE_LINT=true
        working-directory: ./mattermost-server

  test-server:
    name: Test Server
    runs-on: cc-runner
    needs: [ check-server-style , check-app-layers , check-store-layers ]
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          path: ./mattermost-server
      - name: Add Go Path # Do this before all go commands
        run: | 
          echo ::set-env name=GOPATH::$HOME/go
          echo ::add-path::$HOME/go/bin
          echo ::add-path::/usr/local/go/bin
      - name: Test Server
        run: |
          make test-server
        working-directory: ./mattermost-server
      - name: Generate Html Report
        run: xunit-viewer -r report.xml -o report.html
        working-directory: ./mattermost-server
      - name: Upload Test Report
        uses: actions/upload-artifact@v2
        with:
          name: server-test-results
          path: |
            mattermost-server/report.xml
            mattermost-server/report.html
      
  check-webapp-type:
    name: Check Webapp Type
    runs-on: cc-runner
    needs: [ check-env ]
    steps:
      - name: Export Webapp Repository Name
        run: | 
          echo "Server Repository: $GITHUB_REPOSITORY"
          echo ::set-env name=CC_WEBAPP_REPOSITORY::${GITHUB_REPOSITORY%%/mattermost-server}/mattermost-webapp
      - name: Checkout Webapp Repository
        uses: actions/checkout@v2
        with:
          repository: ${{ env.CC_WEBAPP_REPOSITORY }}
          path: ./mattermost-webapp
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependency
        run: npm ci
        working-directory: ./mattermost-webapp
      - name: Check Type
        run: npm run check-types
        working-directory: ./mattermost-webapp

  test-webapp:
    name: Test Webapp
    runs-on: cc-runner
    needs: [ check-webapp-type ]
    steps:
      - name: Export Webapp Repository Name
        run: | 
          echo "Server Repository: $GITHUB_REPOSITORY"
          echo ::set-env name=CC_WEBAPP_REPOSITORY::${GITHUB_REPOSITORY%%/mattermost-server}/mattermost-webapp
      - name: Checkout Webapp Repository
        uses: actions/checkout@v2
        with:
          repository: ${{ env.CC_WEBAPP_REPOSITORY }}
          path: ./mattermost-webapp
      - name: Cache node modules
        uses: actions/cache@v2
        env:
          cache-name: cache-node-modules
        with:
          # npm cache files are stored in `~/.npm` on Linux/macOS
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      - name: Install Dependency
        run: npm ci
        working-directory: ./mattermost-webapp
      - name: Test
        run: npm run test-ci 
        working-directory: ./mattermost-webapp
      - name: Generate HTML Report
        run: xunit-viewer -r build/test-results.xml -o build/test-results.html
        working-directory: ./mattermost-webapp
      - name: Upload Test Report
        uses: actions/upload-artifact@v2
        with:
          name: webapp-test-results
          path: |
            mattermost-webapp/build/test-results.xml
            mattermost-webapp/build/test-results.html

  # build:
  #   name: Build and Package
  #   runs-on: cc-runner
  #   needs: [ test-server , test-webapp ]
  #   steps:
  #     - name: Export Webapp Repository Name
  #       run: | 
  #         echo "Server Repository: $GITHUB_REPOSITORY"
  #         echo ::set-env name=CC_WEBAPP_REPOSITORY::${GITHUB_REPOSITORY%%/mattermost-server}/mattermost-webapp
  #     - name: Export Build Number
  #       run: echo ::set-env name=BUILD_NUMBER::$CC_BUILD_PREFIX$GITHUB_RUN_NUMBER
  #     - name: Checkout Webapp Repository
  #       uses: actions/checkout@v2
  #       with:
  #         repository: ${{ env.CC_WEBAPP_REPOSITORY }}
  #         path: ./mattermost-webapp
  #     - name: Checkout Server Repository
  #       uses: actions/checkout@v2
  #       with:
  #         path: ./mattermost-server
  #     - name: Add Go Path # Do this before all go commands
  #       run: | 
  #         echo ::set-env name=GOPATH::$HOME/go
  #         echo ::add-path::$HOME/go/bin
  #         echo ::add-path::/usr/local/go/bin
  #     - name: Cache node modules
  #       uses: actions/cache@v2
  #       env:
  #         cache-name: cache-node-modules
  #       with:
  #         # npm cache files are stored in `~/.npm` on Linux/macOS
  #         path: ~/.npm
  #         key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
  #         restore-keys: |
  #           ${{ runner.os }}-build-${{ env.cache-name }}-
  #           ${{ runner.os }}-build-
  #           ${{ runner.os }}-
  #     - name: Install Dependency
  #       run: |
  #         npm ci
  #         cd node_modules/mattermost-redux && npm i && npm run build
  #       working-directory: ./mattermost-webapp
  #     - name: Build Webapp
  #       run: npm run build 
  #       working-directory: ./mattermost-webapp
  #     - name: Setting up Enterprise Environment
  #       run: |
  #         rm -rf enterprise
  #         mkdir -p enterprise/imports
  #         cp -T mattermost-server/imports/placeholder.go enterprise/imports/imports.go
  #     - name: Build Server
  #       run: make build-cmd
  #       working-directory: ./mattermost-server
  #     - name: Package
  #       run: make package
  #       working-directory: ./mattermost-server
  #     - name: Upload Windows Package
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: cchat-server-windows
  #         path: |
  #           mattermost-server/dist
  #     - name: Upload Linux Package
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: cchat-server-linux
  #         path: |
  #           mattermost-server/dist
  #     - name: Upload OSX Package
  #       uses: actions/upload-artifact@v2
  #       with:
  #         name: cchat-server-osx
  #         path: |
  #           mattermost-server/dist
